{"ast":null,"code":"import { authConstants } from \"./constants\";\nimport axios from \"../helpers/axios\";\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    const res = await axios.post('admin/signin');\n    dispatch({\n      type: authConstants.LOGIN_REQUEST,\n      payload: { ...user\n      }\n    }); // dispatch({ type: authConstants.LOGIN_REQUEST });\n    // const res = await axios.post(`/admin/signin`, {\n    //     ...user\n    // });\n    // if(res.status === 200){\n    //     const { token, user } = res.data;\n    //     localStorage.setItem('token', token);\n    //     localStorage.setItem('user', JSON.stringify(user));\n    //     dispatch({\n    //         type: authConstants.LOGIN_SUCCESS,\n    //         payload: {\n    //             token, user\n    //         }\n    //     });\n    // }else{\n    //     if(res.status === 400){\n    //         dispatch({\n    //             type: authConstants.LOGIN_FAILURE,\n    //             payload: { error: res.data.error }\n    //         });\n    //     }\n    // }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: authConstants.LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGOUT_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/hamdi/Desktop/final ecommerce front end/ecommerce-admin-app/src/actions/auth.actions.js"],"names":["authConstants","axios","login","user","console","log","dispatch","res","post","type","LOGIN_REQUEST","payload","isUserLoggedIn","token","localStorage","getItem","JSON","parse","LOGIN_SUCCESS","LOGIN_FAILURE","error","signout","LOGOUT_REQUEST","status","clear","LOGOUT_SUCCESS","LOGOUT_FAILURE","data"],"mappings":"AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAE3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,SAAO,MAAOG,QAAP,IAAoB;AAC/B,UAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,cAAX,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACT,aAAa,CAACU,aADd;AAELC,MAAAA,OAAO,EAAC,EACJ,GAAGR;AADC;AAFH,KAAD,CAAR,CAH+B,CAYvB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAnCD;AAoCH,CAxCM;AA0CP,OAAO,MAAMS,cAAc,GAAG,MAAM;AAChC,SAAO,MAAMN,QAAN,IAAkB;AACrB,UAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAGF,KAAH,EAAS;AACL,YAAMV,IAAI,GAAGa,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAT,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAET,aAAa,CAACkB,aADf;AAELP,QAAAA,OAAO,EAAE;AACLE,UAAAA,KADK;AACEV,UAAAA;AADF;AAFJ,OAAD,CAAR;AAMH,KARD,MAQK;AACDG,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAET,aAAa,CAACmB,aADf;AAELR,QAAAA,OAAO,EAAE;AAAES,UAAAA,KAAK,EAAE;AAAT;AAFJ,OAAD,CAAR;AAIH;AACJ,GAhBD;AAiBH,CAlBM;AAoBP,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,SAAO,MAAMf,QAAN,IAAkB;AAErBA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAET,aAAa,CAACsB;AAAtB,KAAD,CAAR;AACA,UAAMf,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAY,gBAAZ,CAAlB;;AAEA,QAAGD,GAAG,CAACgB,MAAJ,KAAe,GAAlB,EAAsB;AAClBT,MAAAA,YAAY,CAACU,KAAb;AACAlB,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAET,aAAa,CAACyB;AAAtB,OAAD,CAAR;AACH,KAHD,MAGK;AACDnB,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAET,aAAa,CAAC0B,cADf;AAELf,QAAAA,OAAO,EAAE;AAAES,UAAAA,KAAK,EAAEb,GAAG,CAACoB,IAAJ,CAASP;AAAlB;AAFJ,OAAD,CAAR;AAIH;AAGJ,GAhBD;AAiBH,CAlBM","sourcesContent":["import { authConstants } from \"./constants\";\r\nimport axios from \"../helpers/axios\";\r\n\r\nexport const login = (user) => {\r\n\r\n    console.log(user)\r\n\r\n    return async (dispatch) => {\r\nconst res = await axios.post('admin/signin')\r\n\r\ndispatch({\r\n    type:authConstants.LOGIN_REQUEST,\r\n    payload:{\r\n        ...user\r\n    }\r\n})\r\n\r\n\r\n\r\n        // dispatch({ type: authConstants.LOGIN_REQUEST });\r\n        // const res = await axios.post(`/admin/signin`, {\r\n        //     ...user\r\n        // });\r\n\r\n        // if(res.status === 200){\r\n        //     const { token, user } = res.data;\r\n        //     localStorage.setItem('token', token);\r\n        //     localStorage.setItem('user', JSON.stringify(user));\r\n        //     dispatch({\r\n        //         type: authConstants.LOGIN_SUCCESS,\r\n        //         payload: {\r\n        //             token, user\r\n        //         }\r\n        //     });\r\n        // }else{\r\n        //     if(res.status === 400){\r\n        //         dispatch({\r\n        //             type: authConstants.LOGIN_FAILURE,\r\n        //             payload: { error: res.data.error }\r\n        //         });\r\n        //     }\r\n        // }\r\n    }\r\n}\r\n\r\nexport const isUserLoggedIn = () => {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if(token){\r\n            const user = JSON.parse(localStorage.getItem('user'));\r\n            dispatch({\r\n                type: authConstants.LOGIN_SUCCESS,\r\n                payload: {\r\n                    token, user\r\n                }\r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: authConstants.LOGIN_FAILURE,\r\n                payload: { error: 'Failed to login' }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const signout = () => {\r\n    return async dispatch => {\r\n\r\n        dispatch({ type: authConstants.LOGOUT_REQUEST });\r\n        const res = await axios.post(`/admin/signout`);\r\n\r\n        if(res.status === 200){\r\n            localStorage.clear();\r\n            dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n        }else{\r\n            dispatch({\r\n                type: authConstants.LOGOUT_FAILURE,\r\n                payload: { error: res.data.error }\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}