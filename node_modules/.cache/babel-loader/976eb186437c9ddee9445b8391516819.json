{"ast":null,"code":"import { authConstants } from \"./constants\";\nimport axios from \"../helpers/axios\";\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(`/admin/signin`, { ...user\n    });\n    console.log('user:', res.state);\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: authConstants.LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGOUT_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/hamdi/Desktop/final ecommerce front end/ecommerce-admin-app/src/actions/auth.actions.js"],"names":["authConstants","axios","login","user","console","log","dispatch","type","LOGIN_REQUEST","res","post","state","status","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","signout","LOGOUT_REQUEST","clear","LOGOUT_SUCCESS","LOGOUT_FAILURE"],"mappings":"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","sourcesContent":["import { authConstants } from \"./constants\";\r\nimport axios from \"../helpers/axios\";\r\n\r\nexport const login = (user) => {\r\n\r\n    console.log(user)\r\n\r\n    return async (dispatch) => {\r\n\r\n        dispatch({ type: authConstants.LOGIN_REQUEST });\r\n        const res = await axios.post(`/admin/signin`, {\r\n            ...user\r\n        });\r\n        console.log('user:',res.state)\r\n        if(res.status === 200){\r\n            const { token, user } = res.data;\r\n           \r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            dispatch({\r\n                type: authConstants.LOGIN_SUCCESS,\r\n                payload: {\r\n                    token, user\r\n                }\r\n            });\r\n        }else{\r\n            if(res.status === 400){\r\n                dispatch({\r\n                    type: authConstants.LOGIN_FAILURE,\r\n                    payload: { error: res.data.error }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const isUserLoggedIn = () => {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if(token){\r\n            const user = JSON.parse(localStorage.getItem('user'));\r\n            dispatch({\r\n                type: authConstants.LOGIN_SUCCESS,\r\n                payload: {\r\n                    token, user\r\n                }\r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: authConstants.LOGIN_FAILURE,\r\n                payload: { error: 'Failed to login' }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const signout = () => {\r\n    return async dispatch => {\r\n\r\n        dispatch({ type: authConstants.LOGOUT_REQUEST });\r\n        const res = await axios.post(`/admin/signout`);\r\n\r\n        if(res.status === 200){\r\n            localStorage.clear();\r\n            dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n        }else{\r\n            dispatch({\r\n                type: authConstants.LOGOUT_FAILURE,\r\n                payload: { error: res.data.error }\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}